const { Scenes, Markup } = require('telegraf');
const config = require('../config.json')
const tools = require('../tools.js')

const chooseScene = new Scenes.WizardScene(
    'choose',
    async(ctx) => {
        ctx.reply("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö..")
        ctx.session.user = {}
        ctx.session.user.id = ctx.message.from.id
        ctx.session.user.page = 0
        ctx.session.user.objects = await tools.getFavoritesMsg(ctx.session.user.id)
        try {
            const buttons = await generate_menu(ctx)
            if (buttons[0][0].callback_data == undefined) {
                ctx.reply("–û—à–∏–±–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ")
                return ctx.scene.leave()
            }
            const inline = Markup.inlineKeyboard(buttons)
            ctx.reply("‚úÖ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç. ‚ùå - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞", inline)
        } catch (e) {
            ctx.reply("–û—à–∏–±–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ")
            return ctx.scene.leave()
        }
        return ctx.wizard.next()
    },
    async(ctx) => {
        if (ctx.update.callback_query) {
            switch (ctx.update.callback_query.data) {
                case "exit":
                    {
                        await ctx.answerCbQuery("–í—ã—Ö–æ–∂—É")
                        ctx.deleteMessage()
                        return ctx.scene.leave()
                    }
                case "back":
                    {
                        try {
                            let tmp = Number(ctx.session.user.page) - 3
                            ctx.session.user.page = (tmp >= 3) ? tmp : 0;
                            var buttonsArray = await generate_menu(ctx)
                            var inline = Markup.inlineKeyboard(buttonsArray)
                            ctx.editMessageText("‚úÖ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç. ‚ùå - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞",
                                inline)
                        } catch (e) {
                            throw "–ù–µ –Ω–∞–π–¥–µ–Ω–æ!"
                        } finally {
                            ctx.answerCbQuery("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!")
                        }
                        break;
                    }
                case "forward":
                    {
                        try {
                            let tmp = Number(ctx.session.user.page) + 3
                            ctx.session.user.page = tmp
                            var buttonsArray = await generate_menu(ctx)
                            var inline = Markup.inlineKeyboard(buttonsArray)
                            ctx.editMessageText("‚úÖ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç. ‚ùå - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞",
                                inline)
                        } catch (e) {
                            console.log(e)
                            throw "–ù–µ –Ω–∞–π–¥–µ–Ω–æ2"
                        } finally {
                            ctx.answerCbQuery("–í—ã–ø–æ–ª–Ω–µ–Ω–æ!")
                        }
                        break;
                    }
                case "save":
                    {
                        await tools.updateUserStreamers(ctx.session.user.objects[0], ctx.session.user.id)
                        await ctx.answerCbQuery("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                        ctx.deleteMessage()
                        return ctx.scene.leave()
                    }
                default:
                    {
                        //search in objects
                        for (var i = 0; i < ctx.session.user.objects[0].length; i++) {
                            if (ctx.session.user.objects[0][i].id === Number(ctx.update.callback_query.data)) {
                                ctx.session.user.objects[0][i].sendNotification = !ctx.session.user.objects[0][i].sendNotification
                                ctx.answerCbQuery("–ò–∑–º–µ–Ω–µ–Ω–æ")
                                var buttonsArray = await generate_menu(ctx)
                                var inline = Markup.inlineKeyboard(buttonsArray)
                                ctx.editMessageText("‚úÖ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç. ‚ùå - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞",
                                    inline)
                            }
                        }
                    }
            }
        }

    }
)

async function generate_menu(ctx) {
    let buttonsArray = [];
    try {

        length = ctx.session.user.objects[1].length
        console.log("Before: ", ctx.session.user.page)
            //FIXME
        let count = (ctx.session.user.page - 3 >= 0) ? ctx.session.user.page - 3 : 0
        for (var i = count, k = 0; i < length && k < 3; ++i, k++) {
            var object = ctx.session.user.objects[1][i]
            buttonsArray.push([Markup.button.callback((ctx.session.user.objects[0][i].sendNotification ? "‚úÖ" : "‚ùå") + object.streamer, object.streamer_id)])
            ctx.session.user.page = i;
        }
        console.log("After: ", ctx.session.user.page)
        buttonsArray.push([Markup.button.callback("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "save")])
        buttonsArray.push([Markup.button.callback("–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", "exit")])


        const div = (x, y) => x / y >> 0 // –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª–æ
        const page = div(ctx.session.user.page, 3)
        const countOfAllPage = div(length + 3 - 1, 3) // –¥–µ–ª–µ–Ω–∏–µ —Å –∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤–≤–µ—Ä—Ö

        if (page == 0) { // –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (countOfAllPage > 1) { // –µ—Å–ª–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
                console.log(countOfAllPage)
                buttonsArray.push([
                    Markup.button.callback('üìù' + (page + 1) + "/" + countOfAllPage, "noth"),
                    Markup.button.callback("‚û°Ô∏è", "forward"),
                ])
            } else { // –µ—Å–ª–∏ –≤—Å–µ –≤–ª–µ–∑–∞—é—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
                buttonsArray.push([
                    Markup.button.callback('üìù' + "1" + "/" + "1", "noth"),
                ])
            }
        } else if (page == length - 1) { // –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            buttonsArray.push([
                Markup.button.callback("‚¨ÖÔ∏è", "back"),
                Markup.button.callback('üìù' + (page + 1) + "/" + countOfAllPage, "noth"),
            ])
        } else { // —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
            buttonsArray.push([
                Markup.button.callback("‚¨ÖÔ∏è", "back"),
                Markup.button.callback('üìù' + (page + 1) + "/" + countOfAllPage, "noth"),
                Markup.button.callback("‚û°Ô∏è", "forward"),
            ])
        }
    } catch (e) {
        console.log(e)
        throw "–ù–µ –Ω–∞–π–¥–µ–Ω–æ!"
    }
    return buttonsArray
}

module.exports = {
    scene: chooseScene
}